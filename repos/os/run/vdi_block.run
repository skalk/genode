# perform write tests when requested
if {[info exists env(GENODE_TEST_WRITE)]} {
set test_write 1
} else {
set test_write 0
}

if {![have_spec linux]} {
	puts "This run script is not supported on this platform."
	exit 0
}

set small_test 1

#
# Check used commands
#
if {![file exists bin/block.vdi]} {
	set vbox_manage [installed_command VBoxManage]
}

#
# Build
#
set build_components {
	core init timer
	server/vdi_block
	server/lx_fs
	app/block_tester
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#
append config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL" />
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>

	<default caps="100"/>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>}

append_platform_drv_config

append config {
	<start name="lx_fs" ld="no">
		<resource name="RAM" quantum="8M"/>
		<provides> <service name="File_system"/> </provides>
		<config>
			<policy label_prefix="vdi_block" root="/" writeable="yes"/>
		</config>
	</start>

	<start name="vdi_block">
		<resource name="RAM" quantum="8M"/>
		<provides> <service name="Block"/> </provides>
		<config file="/block.vdi" writeable="yes">
			<vfs> <fs buffer_size="1M"/> </vfs>
		</config>
		<route>
			<service name="File_system"><child name="lx_fs"/></service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>

	<start name="block_tester" caps="200">
		<resource name="RAM" quantum="64M"/>
		<config verbose="no" report="no" log="yes" stop_on_error="no">
			<tests>}

append_if $small_test config {
				<sequential length="256M" size="64K" synchronous="yes"/>
				<random     length="256M" size="64K" seed="0xdeadbeef"/>}

append_if [expr !$small_test] config {
				<sequential length="1G" size="4K"   synchronous="no"/>
				<sequential length="1G" size="8K"   synchronous="no"/>
				<sequential length="1G" size="64K"  synchronous="yes"/>
				<sequential length="3G" size="1M"   synchronous="no"/>
				<random     length="1G" size="16K"  seed="0xdeadbeef" synchronous="yes"/>
				<random     length="3G" size="512K" seed="0xc0ffee"   synchronous="yes"/>
				<ping_pong  length="1G" size="16K"/>}

append_if $test_write config {
				<sequential length="256M" size="64K"  synchronous="no" write="yes"/>
				<replay bulk="yes">
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="2048" count="1016"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="2048" count="1016"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="2048" count="1016"/>
					<request type="read" lba="4096" count="1"/>
					<request type="read" lba="51881" count="1"/>
					<request type="read" lba="51890" count="1"/>
					<request type="read" lba="114184" count="14"/>
					<request type="read" lba="114198" count="1"/>
					<request type="read" lba="114033" count="127"/>
					<request type="read" lba="114160" count="24"/>
					<request type="write" lba="0" count="1"/>
					<request type="read" lba="12288" count="2048"/>
					<request type="write" lba="4096" count="2048"/>
					<request type="write" lba="0" count="1"/>
					<request type="write" lba="2048" count="1"/>
					<request type="write" lba="5696" count="1"/>
					<request type="write" lba="5696" count="1"/>
					<request type="write" lba="5696" count="1"/>
					<request type="read" lba="4096" count="1"/>
					<request type="read" lba="61440" count="16"/>
					<request type="read" lba="158777" count="127"/>
					<request type="write" lba="40960" count="2048"/>
					<request type="write" lba="0" count="1"/>
					<request type="write" lba="2073" count="1"/>
					<request type="read" lba="190483" count="64"/>
					<request type="read" lba="190411" count="53"/>
					<request type="read" lba="190464" count="11"/>
					<request type="read" lba="106074" count="64"/>
					<request type="read" lba="105954" count="56"/>
					<request type="read" lba="122802" count="24"/>
					<request type="read" lba="123594" count="64"/>
					<request type="read" lba="123722" count="64"/>
				</replay>}
append config {
			</tests>
		</config>
		<route>
			<service name="Block"><child name="vdi_block"/></service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>
</config>}

install_config $config

if {![file exists bin/block.vdi]} {
	catch { exec $vbox_manage createmedium disk --filename bin/block.vdi --size 2048 --format VDI --variant Standard }
}

#
# Boot modules
#

set boot_modules {
	core init timer lx_fs vdi_block
	ld.lib.so vfs.lib.so block_tester
	block.vdi
}

append_platform_drv_boot_modules

build_boot_image $boot_modules

run_genode_until {.*child "block_tester" exited with exit value 0.*\n} 300

#exec rm -f bin/block.vdi
